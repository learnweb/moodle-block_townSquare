{"version":3,"file":"postletter.min.js","sources":["../src/postletter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport {getString} from \"core/str\";\r\nimport {prefetchStrings} from 'core/prefetch';\r\n\r\n/**\r\n * Javascript for the post letter\r\n *\r\n * This file implements 2 functionalities:\r\n * - cuts posts that have many characters and shows a \"see more\" Button to see the whole text.\r\n * - Unnecessary <p> Tags from the Database are being replaced with line breaks to make the text more readable.\r\n *\r\n * @module     block_townsquare/postletter\r\n * @copyright  2023 Tamaro Walter\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nconst contentElements = document.getElementsByClassName('postletter_message');\r\nconst buttons = document.getElementsByClassName('townsquare_showmore');\r\nconst originalTexts = [];\r\n\r\nconst Selectors = {\r\n    actions: {\r\n        seemorebutton: '[data-action=\"block_townsquare/showmore_button\"]',\r\n    },\r\n};\r\n\r\n/**\r\n * Init function\r\n *\r\n * The function can cut the text or extract paragraphs of a post.\r\n */\r\nexport function init() {\r\n    contentElements.forEach(\r\n        (element) => {\r\n            // Replace all <p> within the text with simple line breaks..\r\n            replaceParagraghTags(element);\r\n\r\n            // Check if the text is too long.\r\n            if (element.textContent.length >= 250) {\r\n                // If the text is too long, cut it.\r\n                originalTexts[element.id] = element.innerHTML;\r\n                cutString(element);\r\n                element.parentElement.insertAdjacentHTML('beforeend', '<p>');\r\n                buttons[element.id].setAttribute('showmore', 'true');\r\n            } else {\r\n                // If the text is not too long, hide the show more button.\r\n                buttons[element.id].style.display = \"none\";\r\n            }\r\n        }\r\n    );\r\n\r\n    // Get the strings for the show more/show less button.\r\n    prefetchStrings('moodle', ['showmore', 'showless',]);\r\n\r\n    // Add event listeners for the show more Button.\r\n    addEventListener();\r\n}\r\n\r\n/**\r\n * Function to cut a String at a length of 250 characters.\r\n * The function does not cut within a word or after a space.\r\n * If the cutting point is within a word, the function searches for the next space and cuts there.\r\n * @param {object} element\r\n */\r\nfunction cutString(element) {\r\n    let text = element.textContent;\r\n    let index = 250;\r\n    while (text.charAt(index) != \" \") {\r\n        index++;\r\n    }\r\n    element.innerHTML = text.substring(0,index);\r\n}\r\n\r\n/**\r\n * Event listener for the show more/show less button.\r\n */\r\nconst addEventListener = () => {\r\n    document.addEventListener('click', e => {\r\n        if (e.target.closest(Selectors.actions.seemorebutton)) {\r\n            // Get the id of the clicked element.\r\n            let letterid = e.target.id;\r\n            contentElements.forEach(\r\n                (element) => {\r\n                    if (element.id == letterid) {\r\n                        if (buttons[letterid].getAttribute('showmore') == 'true') {\r\n                            element.innerHTML = originalTexts[letterid];\r\n                            changeButtonString(letterid, false);\r\n                        } else {\r\n                            cutString(element);\r\n                            changeButtonString(letterid, true);\r\n                        }\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the button strings.\r\n * @param {string} index Which button should be changed\r\n * @param {boolean} toshowmore a boolean that indicates if the button should show more or less\r\n */\r\nasync function changeButtonString(index, toshowmore) {\r\n    if (toshowmore == true) {\r\n        buttons[index].textContent = await getString('showmore', 'moodle');\r\n        buttons[index].setAttribute('showmore', 'true');\r\n    } else {\r\n        buttons[index].textContent = await getString('showless', 'moodle');\r\n        buttons[index].setAttribute('showmore', 'false');\r\n    }\r\n}\r\n\r\n/**\r\n * Removes in a text all &nbsp; and surrounding <p> tags excluding the first occurrence.\r\n *\r\n * Helper function to make post look better.\r\n * @param {object} element\r\n */\r\nasync function replaceParagraghTags(element) {\r\n    // Identify and store the first <p> and </p> tags\r\n    let message = element.innerHTML;\r\n    const firstPTag = message.indexOf('<p>');\r\n    const lastPTag = message.lastIndexOf('</p>');\r\n\r\n    // Remove &nbsp; and surrounding <p> tags excluding the first occurrence\r\n    message = message.replace(/<p>&nbsp;<\\/p>/g, '').replace(/&nbsp;/g, '');\r\n\r\n    // Replace <p> tags with <br> excluding the first occurrence\r\n    message = message.substring(0, firstPTag + 3) +\r\n        message.substring(firstPTag + 3, lastPTag).replace(/<p>/g, '<br>').replace(/<\\/p>/g, '') +\r\n        message.substring(lastPTag);\r\n    element.innerHTML = message;\r\n}"],"names":["contentElements","forEach","element","message","innerHTML","firstPTag","indexOf","lastPTag","lastIndexOf","replace","substring","replaceParagraghTags","textContent","length","originalTexts","id","cutString","parentElement","insertAdjacentHTML","buttons","setAttribute","style","display","addEventListener","document","getElementsByClassName","Selectors","seemorebutton","text","index","charAt","e","target","closest","letterid","getAttribute","changeButtonString","toshowmore"],"mappings":"gMA8CIA,gBAAgBC,SACXC,0BAsF2BA,aAE5BC,QAAUD,QAAQE,gBAChBC,UAAYF,QAAQG,QAAQ,OAC5BC,SAAWJ,QAAQK,YAAY,QAGrCL,QAAUA,QAAQM,QAAQ,kBAAmB,IAAIA,QAAQ,UAAW,IAGpEN,QAAUA,QAAQO,UAAU,EAAGL,UAAY,GACvCF,QAAQO,UAAUL,UAAY,EAAGE,UAAUE,QAAQ,OAAQ,QAAQA,QAAQ,SAAU,IACrFN,QAAQO,UAAUH,UACtBL,QAAQE,UAAYD,QAjGZQ,CAAqBT,SAGjBA,QAAQU,YAAYC,QAAU,KAE9BC,cAAcZ,QAAQa,IAAMb,QAAQE,UACpCY,UAAUd,SACVA,QAAQe,cAAcC,mBAAmB,YAAa,OACtDC,QAAQjB,QAAQa,IAAIK,aAAa,WAAY,SAG7CD,QAAQjB,QAAQa,IAAIM,MAAMC,QAAU,wCAMhC,SAAU,CAAC,WAAY,aAGvCC;;;;;;;;;;;;MAvCEvB,gBAAkBwB,SAASC,uBAAuB,sBAClDN,QAAUK,SAASC,uBAAuB,uBAC1CX,cAAgB,GAEhBY,kBACO,CACLC,cAAe,6DA0CdX,UAAUd,aACX0B,KAAO1B,QAAQU,YACfiB,MAAQ,SACiB,KAAtBD,KAAKE,OAAOD,QACfA,QAEJ3B,QAAQE,UAAYwB,KAAKlB,UAAU,EAAEmB,aAMnCN,iBAAmB,KACrBC,SAASD,iBAAiB,SAASQ,OAC3BA,EAAEC,OAAOC,QAAQP,kBAAkBC,eAAgB,KAE/CO,SAAWH,EAAEC,OAAOjB,GACxBf,gBAAgBC,SACXC,UACOA,QAAQa,IAAMmB,WACoC,QAA9Cf,QAAQe,UAAUC,aAAa,aAC/BjC,QAAQE,UAAYU,cAAcoB,UAClCE,mBAAmBF,UAAU,KAE7BlB,UAAUd,SACVkC,mBAAmBF,UAAU,4BAc1CE,mBAAmBP,MAAOQ,YACnB,GAAdA,YACAlB,QAAQU,OAAOjB,kBAAoB,kBAAU,WAAY,UACzDO,QAAQU,OAAOT,aAAa,WAAY,UAExCD,QAAQU,OAAOjB,kBAAoB,kBAAU,WAAY,UACzDO,QAAQU,OAAOT,aAAa,WAAY"}