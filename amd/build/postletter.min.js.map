{"version":3,"file":"postletter.min.js","sources":["../src/postletter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getString} from \"core/str\";\nimport {prefetchStrings} from 'core/prefetch';\n\n/**\n * Javascript for the post letter\n *\n * This file implements 2 functionalities:\n * - cuts posts that have many characters and shows a \"see more\" Button to see the whole text.\n * - Unnecessary <p> Tags from the Database are being replaced with line breaks to make the text more readable.\n *\n * @module     block_townsquare/postletter\n * @copyright  2023 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst contentElements = document.getElementsByClassName('postletter_message');\nconst buttons = document.getElementsByClassName('townsquare_showmore');\nconst originalTexts = [];\n\nconst Selectors = {\n    actions: {\n        seemorebutton: '[data-action=\"block_townsquare/showmore_button\"]',\n    },\n};\n\n/**\n * Init function\n *\n * The function can cut the text or extract paragraphs of a post.\n */\nexport function init() {\n    contentElements.forEach(\n        (element) => {\n            // Replace all <p> within the text with simple line breaks..\n            replaceParagraghTags(element);\n\n            // Check if the text is too long.\n            if (element.textContent.length >= 250) {\n                // If the text is too long, cut it.\n                originalTexts[element.id] = element.innerHTML;\n                cutString(element);\n                element.parentElement.insertAdjacentHTML('beforeend', '<p>');\n                buttons[element.id].setAttribute('showmore', 'true');\n            } else {\n                // If the text is not too long, hide the show more button.\n                buttons[element.id].style.display = \"none\";\n            }\n        }\n    );\n\n    // Get the strings for the show more/show less button.\n    prefetchStrings('block_townsquare', ['showmore', 'showless',]);\n\n    // Add event listeners for the show more Button.\n    addEventListener();\n}\n\n/**\n * Function to cut a String at a length of 250 characters.\n * The function does not cut within a word or after a space.\n * If the cutting point is within a word, the function searches for the next space and cuts there.\n * @param {object} element\n */\nfunction cutString(element) {\n    let text = element.textContent;\n    let index = 250;\n    while (text.charAt(index) != \" \") {\n        index++;\n    }\n    element.innerHTML = text.substring(0,index);\n}\n\n/**\n * Event listener for the show more/show less button.\n */\nconst addEventListener = () => {\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.seemorebutton)) {\n            // Get the id of the clicked element.\n            let letterid = e.target.id;\n            contentElements.forEach(\n                (element) => {\n                    if (element.id == letterid) {\n                        if (buttons[letterid].getAttribute('showmore') == 'true') {\n                            element.innerHTML = originalTexts[letterid];\n                            changeButtonString(letterid, false);\n                        } else {\n                            cutString(element);\n                            changeButtonString(letterid, true);\n                        }\n                    }\n                }\n            );\n        }\n    });\n};\n\n/**\n * Changes the button strings.\n * @param {string} index Which button should be changed\n * @param {boolean} toshowmore a boolean that indicates if the button should show more or less\n */\nasync function changeButtonString(index, toshowmore) {\n    if (toshowmore == true) {\n        buttons[index].textContent = await getString('showmore', 'block_townsquare');\n        buttons[index].setAttribute('showmore', 'true');\n    } else {\n        buttons[index].textContent = await getString('showless', 'block_townsquare');\n        buttons[index].setAttribute('showmore', 'false');\n    }\n}\n\n/**\n * Removes in a text all &nbsp; and surrounding <p> tags excluding the first occurrence.\n *\n * Helper function to make post look better.\n * @param {object} element\n */\nasync function replaceParagraghTags(element) {\n    // Identify and store the first <p> and </p> tags\n    let message = element.innerHTML;\n    const firstPTag = message.indexOf('<p>');\n    const lastPTag = message.lastIndexOf('</p>');\n\n    // Remove &nbsp; and surrounding <p> tags excluding the first occurrence\n    message = message.replace(/<p>&nbsp;<\\/p>/g, '').replace(/&nbsp;/g, '');\n\n    // Replace <p> tags with <br> excluding the first occurrence\n    message = message.substring(0, firstPTag + 3) +\n        message.substring(firstPTag + 3, lastPTag).replace(/<p>/g, '<br>').replace(/<\\/p>/g, '') +\n        message.substring(lastPTag);\n    element.innerHTML = message;\n}"],"names":["contentElements","forEach","element","message","innerHTML","firstPTag","indexOf","lastPTag","lastIndexOf","replace","substring","replaceParagraghTags","textContent","length","originalTexts","id","cutString","parentElement","insertAdjacentHTML","buttons","setAttribute","style","display","addEventListener","document","getElementsByClassName","Selectors","seemorebutton","text","index","charAt","e","target","closest","letterid","getAttribute","changeButtonString","toshowmore"],"mappings":"gMA8CIA,gBAAgBC,SACXC,0BAsF2BA,aAE5BC,QAAUD,QAAQE,gBAChBC,UAAYF,QAAQG,QAAQ,OAC5BC,SAAWJ,QAAQK,YAAY,QAGrCL,QAAUA,QAAQM,QAAQ,kBAAmB,IAAIA,QAAQ,UAAW,IAGpEN,QAAUA,QAAQO,UAAU,EAAGL,UAAY,GACvCF,QAAQO,UAAUL,UAAY,EAAGE,UAAUE,QAAQ,OAAQ,QAAQA,QAAQ,SAAU,IACrFN,QAAQO,UAAUH,UACtBL,QAAQE,UAAYD,QAjGZQ,CAAqBT,SAGjBA,QAAQU,YAAYC,QAAU,KAE9BC,cAAcZ,QAAQa,IAAMb,QAAQE,UACpCY,UAAUd,SACVA,QAAQe,cAAcC,mBAAmB,YAAa,OACtDC,QAAQjB,QAAQa,IAAIK,aAAa,WAAY,SAG7CD,QAAQjB,QAAQa,IAAIM,MAAMC,QAAU,wCAMhC,mBAAoB,CAAC,WAAY,aAGjDC;;;;;;;;;;;;MAvCEvB,gBAAkBwB,SAASC,uBAAuB,sBAClDN,QAAUK,SAASC,uBAAuB,uBAC1CX,cAAgB,GAEhBY,kBACO,CACLC,cAAe,6DA0CdX,UAAUd,aACX0B,KAAO1B,QAAQU,YACfiB,MAAQ,SACiB,KAAtBD,KAAKE,OAAOD,QACfA,QAEJ3B,QAAQE,UAAYwB,KAAKlB,UAAU,EAAEmB,aAMnCN,iBAAmB,KACrBC,SAASD,iBAAiB,SAASQ,OAC3BA,EAAEC,OAAOC,QAAQP,kBAAkBC,eAAgB,KAE/CO,SAAWH,EAAEC,OAAOjB,GACxBf,gBAAgBC,SACXC,UACOA,QAAQa,IAAMmB,WACoC,QAA9Cf,QAAQe,UAAUC,aAAa,aAC/BjC,QAAQE,UAAYU,cAAcoB,UAClCE,mBAAmBF,UAAU,KAE7BlB,UAAUd,SACVkC,mBAAmBF,UAAU,4BAc1CE,mBAAmBP,MAAOQ,YACnB,GAAdA,YACAlB,QAAQU,OAAOjB,kBAAoB,kBAAU,WAAY,oBACzDO,QAAQU,OAAOT,aAAa,WAAY,UAExCD,QAAQU,OAAOjB,kBAAoB,kBAAU,WAAY,oBACzDO,QAAQU,OAAOT,aAAa,WAAY"}