{"version":3,"file":"postletter.min.js","sources":["../src/postletter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getString} from \"core/str\";\nimport {prefetchStrings} from 'core/prefetch';\n\n/**\n * Javascript for the post letter\n *\n * This file implements following functionality:\n * - cuts posts that have many characters and shows a \"see more\" Button to see the whole text.\n *\n * @module     block_townsquare/postletter\n * @copyright  2023 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst contentElements = document.getElementsByClassName('postletter_message');\nconst buttons = document.getElementsByClassName('townsquare_showmore');\nconst originalTexts = [];\n\nconst Selectors = {\n    actions: {\n        seemorebutton: '[data-action=\"block_townsquare/showmore_button\"]',\n    },\n};\n\n/**\n * Init function\n *\n * The function can cut the text or extract paragraphs of a post.\n */\nexport function init() {\n    // Get the strings for the show more/show less button.\n    prefetchStrings('moodle', ['showmore', 'showless',]);\n\n    contentElements.forEach(\n        (element) => {\n            // Check if the text is too long.\n            if (element.textContent.length >= 250) {\n                // If the text is too long, cut it.\n                originalTexts[element.id] = element.innerHTML;\n                cutString(element);\n                element.parentElement.insertAdjacentHTML('beforeend', '<p>');\n                buttons[element.id].setAttribute('showmore', 'true');\n            } else {\n                // If the text is not too long, hide the show more button.\n                buttons[element.id].style.display = \"none\";\n            }\n        }\n    );\n\n    // Add event listeners for the show more Button.\n    addEventListener();\n}\n\n/**\n * Function to cut a String at a length of 250 characters.\n * The function does not cut within a word or after a space.\n * If the cutting point is within a word, the function searches for the next space and cuts there.\n * @param {object} element\n */\nfunction cutString(element) {\n    // TODO: Write a function that cuts the string without destroying the complex html.\n    return element.textContent;\n}\n\n/**\n * Event listener for the show more/show less button.\n */\nconst addEventListener = () => {\n    document.addEventListener('click', e => {\n        if (e.target.closest(Selectors.actions.seemorebutton)) {\n            // Get the id of the clicked element.\n            let letterid = e.target.id;\n            contentElements.forEach(\n                (element) => {\n                    if (element.id == letterid) {\n                        if (buttons[letterid].getAttribute('showmore') == 'true') {\n                            element.innerHTML = originalTexts[letterid];\n                            changeButtonString(letterid, false);\n                        } else {\n                            cutString(element);\n                            changeButtonString(letterid, true);\n                        }\n                    }\n                }\n            );\n        }\n    });\n};\n\n/**\n * Changes the button strings.\n * @param {string} index Which button should be changed\n * @param {boolean} toshowmore a boolean that indicates if the button should show more or less\n */\nasync function changeButtonString(index, toshowmore) {\n    if (toshowmore == true) {\n        buttons[index].textContent = await getString('showmore', 'moodle');\n        buttons[index].setAttribute('showmore', 'true');\n    } else {\n        buttons[index].textContent = await getString('showless', 'moodle');\n        buttons[index].setAttribute('showmore', 'false');\n    }\n}\n"],"names":["prefetchStrings","contentElements","forEach","element","textContent","length","originalTexts","id","innerHTML","cutString","parentElement","insertAdjacentHTML","buttons","setAttribute","style","display","addEventListener","document","getElementsByClassName","Selectors","seemorebutton","e","target","closest","letterid","getAttribute","changeButtonString","async","index","toshowmore","getString"],"mappings":"qLA4CO,YAEH,EAAAA,2BAAgB,SAAU,CAAC,WAAY,aAEvCC,gBAAgBC,SACXC,UAEOA,QAAQC,YAAYC,QAAU,KAE9BC,cAAcH,QAAQI,IAAMJ,QAAQK,UACpCC,UAAUN,SACVA,QAAQO,cAAcC,mBAAmB,YAAa,OACtDC,QAAQT,QAAQI,IAAIM,aAAa,WAAY,SAG7CD,QAAQT,QAAQI,IAAIO,MAAMC,QAAU,UAMhDC;;;;;;;;;;;AApCJ,MAAMf,gBAAkBgB,SAASC,uBAAuB,sBAClDN,QAAUK,SAASC,uBAAuB,uBAC1CZ,cAAgB,GAEhBa,kBACO,CACLC,cAAe,oDAuCvB,SAASX,UAAUN,SAEf,OAAOA,QAAQC,YAMnB,MAAMY,iBAAmBA,KACrBC,SAASD,iBAAiB,SAASK,IAC/B,GAAIA,EAAEC,OAAOC,QAAQJ,kBAAkBC,eAAgB,CAEnD,IAAII,SAAWH,EAAEC,OAAOf,GACxBN,gBAAgBC,SACXC,UACOA,QAAQI,IAAMiB,WACoC,QAA9CZ,QAAQY,UAAUC,aAAa,aAC/BtB,QAAQK,UAAYF,cAAckB,UAClCE,mBAAmBF,UAAU,KAE7Bf,UAAUN,SACVuB,mBAAmBF,UAAU,WAMnD,EAQNG,eAAeD,mBAAmBE,MAAOC,YACnB,GAAdA,YACAjB,QAAQgB,OAAOxB,kBAAoB,EAAA0B,gBAAU,WAAY,UACzDlB,QAAQgB,OAAOf,aAAa,WAAY,UAExCD,QAAQgB,OAAOxB,kBAAoB,EAAA0B,gBAAU,WAAY,UACzDlB,QAAQgB,OAAOf,aAAa,WAAY,UAE/C"}