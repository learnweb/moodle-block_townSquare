{"version":3,"file":"usersettings_save.min.js","sources":["../src/usersettings_save.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to save the user settings in the database.\n *\n * This file implements 1 functionality:\n * - If the \"save settings\" button is pressed, store the settings in the database.\n *\n * @module     block_townsquare/timefilter\n * @copyright  2024 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\n// Get the save button for the user settings.\nconst savebutton = document.getElementById('ts_usersettings_savebutton');\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\nconst checkboxes = document.querySelectorAll('.ts_letter_checkbox');\n\n/**\n * Init function\n *\n * @param {number} userid           The id of the current user.\n * @param {object} settingsfromdb   The settings from the database, if there are any.\n */\nexport function init(userid, settingsfromdb) {\n    // When the page is loaded, set the settings from the database.\n    if (settingsfromdb) {\n        executeusersettings(settingsfromdb);\n    }\n\n    // Add event listener to the save button.\n    savebutton.addEventListener('click', async function() {\n\n        // First step: collect the current settings.\n        // Get the relevant time spans of the time filter and the setting of the letter filter checkboxes..\n        let timespans = collecttimefiltersettings();\n        let letterfilter = collectletterfiltersettings();\n\n        // Second step: store the usersettings in the database.\n        await saveusersettings(userid, timespans['timepast'], timespans['timefuture'], letterfilter);\n    });\n}\n\n/**\n * Function to save the user settings in the database.\n * @param {number} userid\n * @param {number} timefilterpast\n * @param {number} timefilterfuture\n * @param {number} letterfilter\n * @returns {Promise<*>}\n */\nasync function saveusersettings(userid, timefilterpast, timefilterfuture, letterfilter) {\n    window.alert('Settings here.');\n    window.alert(userid);\n    window.alert(timefilterpast);\n    window.alert(timefilterfuture);\n    window.alert(letterfilter);\n    let result = await Ajax.call([{\n        methodname: 'block_townsquare_record_usersettings',\n        args: {\n            userid: userid,\n            timefilterpast: timefilterpast,\n            timefilterfuture: timefilterfuture,\n            letterfilter: letterfilter\n        }\n    }]);\n    window.alert('im done');\n    return result;\n}\n\n/**\n * Function to execute existing user settings when loading the townsquare.\n * @param {number} settingsfromdb\n */\nfunction executeusersettings(settingsfromdb) {\n    // Load the settings.\n    let timefilterfuture = settingsfromdb['timefilterfuture'];\n    let timefilterpast = settingsfromdb['timefilterpast'];\n    let letterfilter = settingsfromdb['letterfilter'];\n\n    // First step: set the time filter settings.\n    // Change the time into the correct radio button id.\n    let futurebuttonid = converttimetoid(timefilterfuture, true);\n    let pastbuttonid = converttimetoid(timefilterpast, false);\n    // If the time span is a combination of past and future, go through the two radio buttons and click them to activate the filter.\n    if (futurebuttonid !== \"ts_time_all\") {\n        futureradiobuttons.forEach(function(button) {\n            if (button.id === futurebuttonid) {\n                button.click();\n            }\n        });\n        pastradiobuttons.forEach(function(button) {\n            if (button.id === pastbuttonid) {\n                button.click();\n            }\n        });\n    } else {\n        // If the time span is the all time filter, click the all time button.\n        alltimebutton.forEach(function(button) {\n            if (button.id === futurebuttonid) {\n                button.click();\n            }\n        });\n    }\n\n    // Second step: set the letter filter settings.\n    let letterfilters = convertletterfiltersetting(letterfilter);\n    checkboxes.forEach(function(checkbox) {\n        if (checkbox.id === \"basicletter\" && letterfilters['basicletter'] === 1) {\n            checkbox.click();\n            checkbox.checked = true;\n        } else if (checkbox.id === \"completionletter\" && letterfilters['completionletter'] === 1) {\n            checkbox.click();\n            checkbox.checked = true;\n        } else if (checkbox.id === \"postletter\" && letterfilters['postletter'] === 1) {\n            checkbox.click();\n            checkbox.checked = true;\n        }\n    });\n}\n\n/**\n * Function to collect the letter filter settings.\n * @returns {number} The setting number.\n */\nfunction collectletterfiltersettings() {\n    let settings = {'basicletter': 0, 'completionletter': 0, 'postletter': 0 };\n\n    checkboxes.forEach(function(checkbox) {\n        if (checkbox.checked) {\n            switch(checkbox.id) {\n                case \"basicletter\":\n                    settings['basicletter'] = 1;\n                    break;\n                case \"completionletter\":\n                    settings['completionletter'] = 1;\n                    break;\n                case \"postletter\":\n                    settings['postletter'] = 1;\n                    break;\n\n            }\n        }\n    });\n    // Calculate the setting number. It is a number between 0 and 7, and each letter represents a bit.\n    return 4 * settings['basicletter'] + 2 * settings['completionletter'] + 1 * settings['postletter'];\n}\n\n/**\n * Function to collect the time filter settings.\n * @returns {{timepast: number, timefuture: number}}\n */\nfunction collecttimefiltersettings() {\n    let settings = { timepast: 0, timefuture: 0};\n    let settingsset = false;\n\n    // Get the relevant time spans of the time filter.\n    // Check if the alltimebutton is set.\n    alltimebutton.forEach(function(button) {\n       if (button.parentNode.classList.contains('active')) {\n           // Get the timespan.\n           settings['timepast'] = convertidtotime(button.id);\n           settings['timefuture'] = convertidtotime(button.id);\n           settingsset = true;\n       }\n    });\n\n    if (settingsset) {\n        return settings;\n    }\n\n    // If the alltimebutton is not set, check which of the future/past buttons is set.\n    futureradiobuttons.forEach(function(button) {\n        if (button.parentNode.classList.contains('active')) {\n            // Get the timespan.\n            settings['timefuture'] = convertidtotime(button.id);\n        }\n    });\n\n    pastradiobuttons.forEach(function(button) {\n        if (button.parentNode.classList.contains('active')) {\n            // Get the timespan.\n            settings['timepast'] = convertidtotime(button.id);\n        }\n    });\n    return settings;\n}\n\n\n/**\n * Function to convert the radio button id to a useable time span.\n * @param {string} id  The id of the radio button\n * @returns {number}\n */\nfunction convertidtotime(id) {\n    // TODO: Please use global functions if possible.\n    switch(id) {\n        case \"ts_time_all\":\n            return 15778463;\n        case \"ts_time_next_twodays\":\n        case \"ts_time_last_twodays\":\n            return 172800;\n        case \"ts_time_next_fivedays\":\n        case \"ts_time_last_fivedays\":\n            return 432000;\n        case \"ts_time_next_week\":\n        case \"ts_time_last_week\":\n            return 604800;\n        case \"ts_time_next_month\":\n        case \"ts_time_last_month\":\n            return 2592000;\n    }\n}\n\n/**\n * Function to convert the time span to a radio button id.\n * @param {number} time\n * @param {bool} future\n * @returns {string}\n */\nfunction converttimetoid(time, future) {\n    switch (time) {\n        case 15778463:\n            return \"ts_time_all\";\n        case 172800:\n            if (future) {\n                return \"ts_time_next_twodays\";\n            }\n            return \"ts_time_past_twodays\";\n        case 432000:\n            if (future) {\n                return \"ts_time_next_fivedays\";\n            }\n            return \"ts_time_last_fivedays\";\n        case 604800:\n            if (future) {\n                return \"ts_time_next_week\";\n            }\n            return \"ts_time_last_week\";\n        case 2592000:\n            if (future) {\n                return \"ts_time_next_month\";\n\n            }\n            return \"ts_time_last_month\";\n    }\n}\n\n/**\n * Converts the number of the letter filter to an object that has the activated letter filters.\n * @param {number} settingnumber\n */\nfunction convertletterfiltersetting(settingnumber) {\n    let settings = {'basicletter': 0, 'completionletter': 0, 'postletter': 0 };\n\n    // Check if the basicletter is active.\n    if (settingnumber >= 4) {\n        settings['basicletter'] = 1;\n    }\n\n    // Check if the completionletter is active.\n    if (settingnumber === 2 || settingnumber === 3 || settingnumber === 6 || settingnumber === 7) {\n        settings['completionletter'] = 1;\n    }\n\n    // check if the postletter is active.\n    if (settingnumber % 2 === 1) {\n        settings['postletter'] = 1;\n    }\n\n    return settings;\n\n}\n"],"names":["userid","settingsfromdb","timefilterfuture","timefilterpast","letterfilter","futurebuttonid","converttimetoid","pastbuttonid","futureradiobuttons","forEach","button","id","click","pastradiobuttons","alltimebutton","letterfilters","settingnumber","settings","convertletterfiltersetting","checkboxes","checkbox","checked","executeusersettings","savebutton","addEventListener","async","timespans","timepast","timefuture","settingsset","parentNode","classList","contains","convertidtotime","collecttimefiltersettings","collectletterfiltersettings","window","alert","result","Ajax","call","methodname","args","saveusersettings","document","getElementById","querySelectorAll","time","future"],"mappings":";;;;;;;;;;oFAyCqBA,OAAQC,gBAErBA,yBAgDqBA,oBAErBC,iBAAmBD,eAAc,iBACjCE,eAAiBF,eAAc,eAC/BG,aAAeH,eAAc,aAI7BI,eAAiBC,gBAAgBJ,kBAAkB,GACnDK,aAAeD,gBAAgBH,gBAAgB,GAE5B,gBAAnBE,gBACAG,mBAAmBC,SAAQ,SAASC,QAC5BA,OAAOC,KAAON,gBACdK,OAAOE,WAGfC,iBAAiBJ,SAAQ,SAASC,QAC1BA,OAAOC,KAAOJ,cACdG,OAAOE,YAKfE,cAAcL,SAAQ,SAASC,QACvBA,OAAOC,KAAON,gBACdK,OAAOE,eAMfG,uBAkJ4BC,mBAC5BC,SAAW,aAAgB,mBAAuB,aAAiB,GAGnED,eAAiB,IACjBC,SAAQ,YAAkB,GAIR,IAAlBD,eAAyC,IAAlBA,eAAyC,IAAlBA,eAAyC,IAAlBA,gBACrEC,SAAQ,iBAAuB,GAI/BD,cAAgB,GAAM,IACtBC,SAAQ,WAAiB,UAGtBA,SApKaC,CAA2Bd,cAC/Ce,WAAWV,SAAQ,SAASW,WACJ,gBAAhBA,SAAST,IAAyD,IAAjCI,cAAa,aAGvB,qBAAhBK,SAAST,IAAmE,IAAtCI,cAAa,kBAGnC,eAAhBK,SAAST,IAAuD,IAAhCI,cAAa,cALpDK,SAASR,QACTQ,SAASC,SAAU,MAnFvBC,CAAoBrB,gBAIxBsB,WAAWC,iBAAiB,SAASC,qBAI7BC,yBAsHJT,SAAW,CAAEU,SAAU,EAAGC,WAAY,GACtCC,aAAc,KAIlBf,cAAcL,SAAQ,SAASC,QACxBA,OAAOoB,WAAWC,UAAUC,SAAS,YAErCf,SAAQ,SAAegB,gBAAgBvB,OAAOC,IAC9CM,SAAQ,WAAiBgB,gBAAgBvB,OAAOC,IAChDkB,aAAc,MAIjBA,mBACOZ,gBAIXT,mBAAmBC,SAAQ,SAASC,QAC5BA,OAAOoB,WAAWC,UAAUC,SAAS,YAErCf,SAAQ,WAAiBgB,gBAAgBvB,OAAOC,QAIxDE,iBAAiBJ,SAAQ,SAASC,QAC1BA,OAAOoB,WAAWC,UAAUC,SAAS,YAErCf,SAAQ,SAAegB,gBAAgBvB,OAAOC,QAG/CM,SAtJaiB,GACZ9B,4BA0FJa,SAAW,aAAgB,mBAAuB,aAAiB,UAEvEE,WAAWV,SAAQ,SAASW,aACpBA,SAASC,eACFD,SAAST,QACP,cACDM,SAAQ,YAAkB,YAEzB,mBACDA,SAAQ,iBAAuB,YAE9B,aACDA,SAAQ,WAAiB,MAOlC,EAAIA,SAAQ,YAAkB,EAAIA,SAAQ,iBAAuB,EAAIA,SAAQ,WA7G7DkB,wBAeKnC,OAAQG,eAAgBD,iBAAkBE,cACtEgC,OAAOC,MAAM,kBACbD,OAAOC,MAAMrC,QACboC,OAAOC,MAAMlC,gBACbiC,OAAOC,MAAMnC,kBACbkC,OAAOC,MAAMjC,kBACTkC,aAAeC,cAAKC,KAAK,CAAC,CAC1BC,WAAY,uCACZC,KAAM,CACF1C,OAAQA,OACRG,eAAgBA,eAChBD,iBAAkBA,iBAClBE,aAAcA,wBAGtBgC,OAAOC,MAAM,WACNC,OA5BGK,CAAiB3C,OAAQ0B,UAAS,SAAcA,UAAS,WAAgBtB,4EA3BjFmB,WAAaqB,SAASC,eAAe,8BACrC/B,cAAgB8B,SAASE,iBAAiB,uBAC1CtC,mBAAqBoC,SAASE,iBAAiB,0BAC/CjC,iBAAmB+B,SAASE,iBAAiB,wBAC7C3B,WAAayB,SAASE,iBAAiB,gCAkLpCb,gBAAgBtB,WAEdA,QACE,qBACM,aACN,2BACA,8BACM,WACN,4BACA,+BACM,UACN,wBACA,2BACM,WACN,yBACA,4BACM,iBAUVL,gBAAgByC,KAAMC,eACnBD,WACC,eACM,mBACN,cACGC,OACO,uBAEJ,4BACN,aACGA,OACO,wBAEJ,6BACN,cACGA,OACO,oBAEJ,yBACN,cACGA,OACO,qBAGJ"}