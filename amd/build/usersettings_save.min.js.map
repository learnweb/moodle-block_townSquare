{"version":3,"file":"usersettings_save.min.js","sources":["../src/usersettings_save.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript to save the user settings in the database.\r\n *\r\n * This file implements 1 functionality:\r\n * - If the \"save settings\" button is pressed, store the settings in the database.\r\n *\r\n * @module     block_townsquare/timefilter\r\n * @copyright  2024 Tamaro Walter\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport Ajax from 'core/ajax';\r\n\r\n// Get the save button for the user settings.\r\nconst savebutton = document.getElementById('ts_usersettings_savebutton');\r\n\r\n// Get the buttons from the time filter.\r\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\r\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\r\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\r\n\r\n// Get the checkboxes from the letter filter.\r\nconst checkboxes = document.querySelectorAll('.ts_letter_checkbox');\r\n\r\n/**\r\n * Init function\r\n *\r\n * @param {number} userid           The id of the current user.\r\n * @param {object} settingsfromdb   The settings from the database, if there are any.\r\n */\r\nexport function init(userid, settingsfromdb) {\r\n    // When the page is loaded, set the settings from the database.\r\n    if (settingsfromdb) {\r\n        executeusersettings(settingsfromdb);\r\n    }\r\n\r\n    // Add event listener to the save button.\r\n    savebutton.addEventListener('click', async function() {\r\n\r\n        // First step: collect the current settings.\r\n        // Get the relevant time spans of the time filter and the setting of the letter filter checkboxes.\r\n        let timespans = collecttimefiltersettings();\r\n        let letterfilter = collectletterfiltersettings();\r\n\r\n        // Second step: store the usersettings in the database.\r\n        await saveusersettings(userid, timespans['timepast'], timespans['timefuture'],\r\n                               letterfilter['basicletter'], letterfilter['completionletter'], letterfilter['postletter']);\r\n    });\r\n}\r\n\r\n/**\r\n * Function to save the user settings in the database.\r\n * @param {number} userid\r\n * @param {number} timefilterpast\r\n * @param {number} timefilterfuture\r\n * @param {number} basicletter\r\n * @param {number} completionletter\r\n * @param {number} postletter\r\n * @returns {Promise<*>}\r\n */\r\nasync function saveusersettings(userid, timefilterpast, timefilterfuture, basicletter, completionletter, postletter) {\r\n    let result ;\r\n    result = await Ajax.call([{\r\n        methodname: 'block_townsquare_record_usersettings',\r\n        args: {\r\n            userid: parseInt(userid),\r\n            timefilterpast: timefilterpast,\r\n            timefilterfuture: timefilterfuture,\r\n            basicletter: basicletter,\r\n            completionletter: completionletter,\r\n            postletter: postletter\r\n        },\r\n    }]);\r\n    return result;\r\n}\r\n\r\n/**\r\n * Function to execute existing user settings when loading the townsquare.\r\n * @param {Object} settingsfromdb\r\n */\r\nfunction executeusersettings(settingsfromdb) {\r\n\r\n    // First step: set the time filter settings.\r\n    // Change the time into the correct radio button id.\r\n    let futurebuttonid = converttimetoid(settingsfromdb['timefilterfuture'], true);\r\n    let pastbuttonid = converttimetoid(settingsfromdb['timefilterpast'], false);\r\n\r\n    // If the time span is a combination of past and future, go through the two radio buttons and activate the filter.\r\n    if (futurebuttonid !== \"ts_time_all\") {\r\n        futureradiobuttons.forEach(function(button) {\r\n            if (button.id === futurebuttonid) {\r\n                button.parentNode.classList.add('active');\r\n                button.checked = true;\r\n                button.dispatchEvent(new Event('change'));\r\n                alltimebutton.forEach(function(alltimebutton) {\r\n                    alltimebutton.checked = false;\r\n                    alltimebutton.parentNode.classList.remove('active');\r\n                });\r\n            }\r\n        });\r\n        pastradiobuttons.forEach(function(button) {\r\n            if (button.id === pastbuttonid) {\r\n                button.parentNode.classList.add('active');\r\n                button.checked = true;\r\n                button.dispatchEvent(new Event('change'));\r\n                alltimebutton.forEach(function(alltimebutton) {\r\n                    alltimebutton.checked = false;\r\n                    alltimebutton.parentNode.classList.remove('active');\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        // If the time span is set to all time, activate the all time button.\r\n        alltimebutton.forEach(function(button) {\r\n            button.parentNode.classList.add('active');\r\n            button.checked = true;\r\n            button.dispatchEvent(new Event('change'));\r\n        });\r\n    }\r\n\r\n    // Second step: set the letter filter settings.\r\n    // Per default all checkboxes are checked. If the setting is 0, uncheck the checkbox.\r\n    checkboxes.forEach(function(checkbox) {\r\n        let basiclettercheck = checkbox.id === 'basicletter' && settingsfromdb['basicletter'] === \"\";\r\n        let completionlettercheck = checkbox.id === 'completionletter' && settingsfromdb['completionletter'] === \"0\";\r\n        let postlettercheck = checkbox.id === 'postletter' && settingsfromdb['postletter'] === \"0\";\r\n\r\n        if (basiclettercheck || completionlettercheck || postlettercheck) {\r\n            checkbox.click();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Function to collect the letter filter settings.\r\n * @returns {{basicletter: number, completionletter: number, postletter: number}}\r\n */\r\nfunction collectletterfiltersettings() {\r\n    let settings = {'basicletter': 0, 'completionletter': 0, 'postletter': 0 };\r\n\r\n    checkboxes.forEach(function(checkbox) {\r\n        if (checkbox.checked) {\r\n            switch(checkbox.id) {\r\n                case \"basicletter\":\r\n                    settings['basicletter'] = 1;\r\n                    break;\r\n                case \"completionletter\":\r\n                    settings['completionletter'] = 1;\r\n                    break;\r\n                case \"postletter\":\r\n                    settings['postletter'] = 1;\r\n                    break;\r\n\r\n            }\r\n        }\r\n    });\r\n    // Calculate the setting number. It is a number between 0 and 7, and each letter represents a bit.\r\n    return settings;\r\n}\r\n\r\n/**\r\n * Function to collect the time filter settings.\r\n * @returns {{timepast: number, timefuture: number}}\r\n */\r\nfunction collecttimefiltersettings() {\r\n    let settings = { timepast: 0, timefuture: 0};\r\n    let settingsset = false;\r\n\r\n    // Get the relevant time spans of the time filter.\r\n    // Check if the alltimebutton is set.\r\n    alltimebutton.forEach(function(button) {\r\n       if (button.parentNode.classList.contains('active')) {\r\n           // Get the timespan.\r\n           settings['timepast'] = convertidtotime(button.id);\r\n           settings['timefuture'] = convertidtotime(button.id);\r\n           settingsset = true;\r\n       }\r\n    });\r\n\r\n    if (settingsset) {\r\n        return settings;\r\n    }\r\n\r\n    // If the alltimebutton is not set, check which of the future/past buttons is set.\r\n    futureradiobuttons.forEach(function(button) {\r\n        if (button.parentNode.classList.contains('active')) {\r\n            // Get the timespan.\r\n            settings['timefuture'] = convertidtotime(button.id);\r\n        }\r\n    });\r\n\r\n    pastradiobuttons.forEach(function(button) {\r\n        if (button.parentNode.classList.contains('active')) {\r\n            // Get the timespan.\r\n            settings['timepast'] = convertidtotime(button.id);\r\n        }\r\n    });\r\n    return settings;\r\n}\r\n\r\n\r\n/**\r\n * Function to convert the radio button id to a useable time span.\r\n * @param {string} id  The id of the radio button\r\n * @returns {number}\r\n */\r\nfunction convertidtotime(id) {\r\n    // TODO: Please use global functions if possible.\r\n    switch(id) {\r\n        case \"ts_time_all\":\r\n            return 15778463;\r\n        case \"ts_time_next_twodays\":\r\n        case \"ts_time_last_twodays\":\r\n            return 172800;\r\n        case \"ts_time_next_fivedays\":\r\n        case \"ts_time_last_fivedays\":\r\n            return 432000;\r\n        case \"ts_time_next_week\":\r\n        case \"ts_time_last_week\":\r\n            return 604800;\r\n        case \"ts_time_next_month\":\r\n        case \"ts_time_last_month\":\r\n            return 2592000;\r\n    }\r\n}\r\n\r\n/**\r\n * Function to convert the time span to a radio button id.\r\n * @param {string} time\r\n * @param {boolean} future\r\n * @returns {string}\r\n */\r\nfunction converttimetoid(time, future) {\r\n    switch (time) {\r\n        case \"15778463\":\r\n            return \"ts_time_all\";\r\n        case \"172800\":\r\n            if (future) {\r\n                return \"ts_time_next_twodays\";\r\n            }\r\n            return \"ts_time_past_twodays\";\r\n        case \"432000\":\r\n            if (future) {\r\n                return \"ts_time_next_fivedays\";\r\n            }\r\n            return \"ts_time_last_fivedays\";\r\n        case \"604800\":\r\n            if (future) {\r\n                return \"ts_time_next_week\";\r\n            }\r\n            return \"ts_time_last_week\";\r\n        case \"2592000\":\r\n            if (future) {\r\n                return \"ts_time_next_month\";\r\n\r\n            }\r\n            return \"ts_time_last_month\";\r\n    }\r\n}\r\n"],"names":["userid","settingsfromdb","futurebuttonid","converttimetoid","pastbuttonid","futureradiobuttons","forEach","button","id","parentNode","classList","add","checked","dispatchEvent","Event","alltimebutton","remove","pastradiobuttons","checkboxes","checkbox","basiclettercheck","completionlettercheck","postlettercheck","click","executeusersettings","savebutton","addEventListener","async","timespans","settings","timepast","timefuture","settingsset","contains","convertidtotime","collecttimefiltersettings","letterfilter","collectletterfiltersettings","timefilterpast","timefilterfuture","basicletter","completionletter","postletter","result","Ajax","call","methodname","args","parseInt","saveusersettings","document","getElementById","querySelectorAll","time","future"],"mappings":"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"}