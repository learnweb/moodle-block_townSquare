{"version":3,"file":"usersettings_save.min.js","sources":["../src/usersettings_save.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to save the user settings in the database.\n *\n * This file implements 1 functionality:\n * - If the \"save settings\" button is pressed, store the settings in the database.\n *\n * @module     block_townsquare/usersettings_save\n * @copyright  2024 Tamaro Walter\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\n// Get the save button for the user settings.\nconst savebutton = document.getElementById('ts_usersettings_savebutton');\n\n// Get the buttons from the time filter.\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\n\n// Get the checkboxes from the letter filter.\nconst checkboxes = document.querySelectorAll('.ts_letter_checkbox');\n\n/**\n * Init function\n *\n * @param {number} userid           The id of the current user.\n * @param {object} settingsfromdb   The settings from the database, if there are any.\n */\nexport function init(userid, settingsfromdb) {\n    // When the page is loaded, set the settings from the database.\n    if (settingsfromdb) {\n        executeusersettings(settingsfromdb);\n    }\n\n    // Add event listener to the save button.\n    savebutton.addEventListener('click', async function() {\n\n        // First step: collect the current settings.\n        // Get the relevant time spans of the time filter and the setting of the letter filter checkboxes.\n        let timespans = collecttimefiltersettings();\n        let letterfilter = collectletterfiltersettings();\n\n        // Second step: store the usersettings in the database.\n        await saveusersettings(userid, timespans['timepast'], timespans['timefuture'], letterfilter['basicletter'],\n            letterfilter['completionletter'], letterfilter['postletter']);\n    });\n}\n\n/**\n * Function to save the user settings in the database.\n * @param {number} userid\n * @param {number} timefilterpast\n * @param {number} timefilterfuture\n * @param {number} basicletter\n * @param {number} completionletter\n * @param {number} postletter\n * @returns {Promise<*>}\n */\nfunction saveusersettings(userid, timefilterpast, timefilterfuture, basicletter, completionletter, postletter) {\n    let result;\n\n    const data = {\n        methodname: 'block_townsquare_record_usersettings',\n        args: {\n            userid: userid,\n            timefilterpast: timefilterpast,\n            timefilterfuture: timefilterfuture,\n            basicletter: basicletter,\n            completionletter: completionletter,\n            postletter: postletter,\n        },\n    };\n    result = Ajax.call([data]);\n\n    // Make the clicked button green by adding a class and remove it afterward.\n    savebutton.classList.add('bg-success', 'text-white', 'ts_button_transition');\n    setTimeout(function() {\n        savebutton.classList.remove('bg-success');\n        savebutton.classList.remove('text-white');\n    }, 1500);\n\n    return result;\n\n}\n\n/**\n * Function to execute existing user settings when loading the townsquare.\n * @param {Object} settingsfromdb\n */\nfunction executeusersettings(settingsfromdb) {\n\n    // First step: set the time filter settings.\n    // Change the time into the correct radio button id.\n    let futurebuttonid = converttimetoid(settingsfromdb['timefilterfuture'], true);\n    let pastbuttonid = converttimetoid(settingsfromdb['timefilterpast'], false);\n\n    // If the time span is a combination of past and future, go through the two radio buttons and activate the filter.\n    if (futurebuttonid !== \"ts_time_all\") {\n        futureradiobuttons.forEach(function(button) {\n            if (button.id === futurebuttonid) {\n                button.parentNode.classList.add('active');\n                button.checked = true;\n                button.dispatchEvent(new Event('change'));\n                alltimebutton.forEach(function(alltimebutton) {\n                    alltimebutton.checked = false;\n                    alltimebutton.parentNode.classList.remove('active');\n                });\n            }\n        });\n        pastradiobuttons.forEach(function(button) {\n            if (button.id === pastbuttonid) {\n                button.parentNode.classList.add('active');\n                button.checked = true;\n                button.dispatchEvent(new Event('change'));\n                alltimebutton.forEach(function(alltimebutton) {\n                    alltimebutton.checked = false;\n                    alltimebutton.parentNode.classList.remove('active');\n                });\n            }\n        });\n    } else {\n        // If the time span is set to all time, activate the all time button.\n        alltimebutton.forEach(function(button) {\n            button.parentNode.classList.add('active');\n            button.checked = true;\n            button.dispatchEvent(new Event('change'));\n        });\n    }\n\n    // Second step: set the letter filter settings.\n    // Per default all checkboxes are checked. If the setting is 0, uncheck the checkbox.\n    checkboxes.forEach(function(checkbox) {\n        let basiclettercheck = checkbox.id === 'basicletter' && settingsfromdb['basicletter'] === \"0\";\n        let completionlettercheck = checkbox.id === 'completionletter' && settingsfromdb['completionletter'] === \"0\";\n        let postlettercheck = checkbox.id === 'postletter' && settingsfromdb['postletter'] === \"0\";\n\n        if (basiclettercheck || completionlettercheck || postlettercheck) {\n            checkbox.click();\n        }\n    });\n}\n\n/**\n * Function to collect the letter filter settings.\n * @returns {{basicletter: number, completionletter: number, postletter: number}}\n */\nfunction collectletterfiltersettings() {\n    let settings = {'basicletter': 0, 'completionletter': 0, 'postletter': 0 };\n\n    checkboxes.forEach(function(checkbox) {\n        if (checkbox.checked) {\n            switch(checkbox.id) {\n                case \"basicletter\":\n                    settings['basicletter'] = 1;\n                    break;\n                case \"completionletter\":\n                    settings['completionletter'] = 1;\n                    break;\n                case \"postletter\":\n                    settings['postletter'] = 1;\n                    break;\n\n            }\n        }\n    });\n    // Calculate the setting number. It is a number between 0 and 7, and each letter represents a bit.\n    return settings;\n}\n\n/**\n * Function to collect the time filter settings.\n * @returns {{timepast: number, timefuture: number}}\n */\nfunction collecttimefiltersettings() {\n    let settings = { timepast: 0, timefuture: 0};\n    let settingsset = false;\n\n    // Get the relevant time spans of the time filter.\n    // Check if the alltimebutton is set.\n    alltimebutton.forEach(function(button) {\n        if (button.parentNode.classList.contains('active')) {\n            // Get the timespan.\n            settings['timepast'] = convertidtotime(button.id);\n            settings['timefuture'] = convertidtotime(button.id);\n            settingsset = true;\n        }\n    });\n\n    if (settingsset) {\n        return settings;\n    }\n\n    // If the alltimebutton is not set, check which of the future/past buttons is set.\n    futureradiobuttons.forEach(function(button) {\n        if (button.parentNode.classList.contains('active')) {\n            // Get the timespan.\n            settings['timefuture'] = convertidtotime(button.id);\n        }\n    });\n\n    pastradiobuttons.forEach(function(button) {\n        if (button.parentNode.classList.contains('active')) {\n            // Get the timespan.\n            settings['timepast'] = convertidtotime(button.id);\n        }\n    });\n    return settings;\n}\n\n\n/**\n * Function to convert the radio button id to a useable time span.\n * @param {string} id  The id of the radio button\n * @returns {number}\n */\nfunction convertidtotime(id) {\n    // TODO: Please use global functions if possible.\n    switch(id) {\n        case \"ts_time_all\":\n            return 15778463;\n        case \"ts_time_next_twodays\":\n        case \"ts_time_last_twodays\":\n            return 172800;\n        case \"ts_time_next_fivedays\":\n        case \"ts_time_last_fivedays\":\n            return 432000;\n        case \"ts_time_next_week\":\n        case \"ts_time_last_week\":\n            return 604800;\n        case \"ts_time_next_month\":\n        case \"ts_time_last_month\":\n            return 2592000;\n    }\n}\n\n/**\n * Function to convert the time span to a radio button id.\n * @param {string} time\n * @param {boolean} future\n * @returns {string}\n */\nfunction converttimetoid(time, future) {\n    switch (time) {\n        case \"15778463\":\n            return \"ts_time_all\";\n        case \"172800\":\n            if (future) {\n                return \"ts_time_next_twodays\";\n            }\n            return \"ts_time_past_twodays\";\n        case \"432000\":\n            if (future) {\n                return \"ts_time_next_fivedays\";\n            }\n            return \"ts_time_last_fivedays\";\n        case \"604800\":\n            if (future) {\n                return \"ts_time_next_week\";\n            }\n            return \"ts_time_last_week\";\n        case \"2592000\":\n            if (future) {\n                return \"ts_time_next_month\";\n\n            }\n            return \"ts_time_last_month\";\n    }\n}\n"],"names":["obj","userid","settingsfromdb","futurebuttonid","converttimetoid","pastbuttonid","futureradiobuttons","forEach","button","id","parentNode","classList","add","checked","dispatchEvent","Event","alltimebutton","remove","pastradiobuttons","checkboxes","checkbox","basiclettercheck","completionlettercheck","postlettercheck","click","executeusersettings","savebutton","addEventListener","async","timespans","settings","timepast","timefuture","settingsset","contains","convertidtotime","collecttimefiltersettings","letterfilter","basicletter","completionletter","postletter","collectletterfiltersettings","timefilterpast","timefilterfuture","result","data","methodname","args","Ajax","call","setTimeout","saveusersettings","_ajax","__esModule","default","document","getElementById","querySelectorAll","time","future"],"mappings":"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"}