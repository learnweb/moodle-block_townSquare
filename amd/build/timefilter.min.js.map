{"version":3,"file":"timefilter.min.js","sources":["../src/timefilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript for the time filter\r\n *\r\n * This file implements 1 functionality:\r\n * - Checks, which of the radio buttons is pressed and filters the content based on the time.\r\n *\r\n * @module     block_townsquare/timefilter\r\n * @copyright  2024 Tamaro Walter\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\n// Get the relevant radio buttons.\r\nconst alltimebutton = document.querySelectorAll('.ts_all_time_button');\r\nconst futureradiobuttons = document.querySelectorAll('.ts_future_time_button');\r\nconst pastradiobuttons = document.querySelectorAll('.ts_past_time_button');\r\n\r\n// Define to change the time span, an additional time span and the current time.\r\nlet currenttime;\r\nlet timestart;\r\nlet timeend;\r\nlet addstarttime;\r\nlet addendtime;\r\n\r\n/**\r\n * Init function\r\n */\r\nexport function init() {\r\n    // Set the current time.\r\n    currenttime = new Date().getTime() / 1000;\r\n\r\n    // Add event listeners to the all kind of buttons.\r\n    alltimeaddEventListener();\r\n    futuretimeaddEventListener();\r\n    pasttimeaddEventListener();\r\n}\r\n\r\n/**\r\n * Function to execute the filter\r\n * @param {int} starttime   Start of time span for filtering of the current pressed button\r\n * @param {int} endtime     End of time span for filtering of the current pressed\r\n * @param {int} addstarttime Start of time span for filtering of an additional radio button.\r\n * @param {int} addendtime   End of time span for filtering of an additional radio button.\r\n * @param {boolean} buttonstate State of the radio button (true or false)\r\n */\r\nfunction executefilter(starttime, endtime, addstarttime, addendtime, buttonstate) {\r\n    // Get all letters that are \"activated\".\r\n    // Activated means that all filters accept the letter and want to show it.\r\n    const letters = document.querySelectorAll('.townsquare_letter.ts_coursefilter_active.ts_letterfilter_active');\r\n\r\n    // Loop through each letter and hide/show based on radiobutton state.\r\n    letters.forEach(function(letter) {\r\n\r\n        // Get the created time stamp of each letter.\r\n        let lettertime = letter.querySelector('.townsquareletter_date').id;\r\n\r\n        // If the radio button is checked and the letter is in the time span, activate it.\r\n        if ((buttonstate && (lettertime >= starttime && lettertime <= endtime)) ||\r\n            (lettertime >= addstarttime && lettertime <= addendtime)) {\r\n            letter.classList.add('ts_timefilter_active'); // Mark the letter as \"active\".\r\n        } else {\r\n            letter.classList.remove('ts_timefilter_active'); // Mark the letter as \"not active\".\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Function to add event listeners to the all_time button.\r\n */\r\nfunction alltimeaddEventListener() {\r\n    alltimebutton.forEach(function(button) {\r\n        button.addEventListener('change', function() {\r\n            // Set the time span to show all letters.\r\n            timestart = currenttime - convertidtotime(button.id);\r\n            timeend = currenttime + convertidtotime(button.id);\r\n            addstarttime = 0;\r\n            addendtime = 0;\r\n\r\n            // Disable all other radio buttons that filter more specific times.\r\n            futureradiobuttons.forEach(function(futureradiobutton) {\r\n                futureradiobutton.checked = false;\r\n                futureradiobutton.parentNode.classList.remove(\"active\");\r\n            });\r\n            pastradiobuttons.forEach(function(pastradiobutton) {\r\n                pastradiobutton.checked = false;\r\n                pastradiobutton.parentNode.classList.remove(\"active\");\r\n\r\n            });\r\n\r\n            // Execute the filter function.\r\n            executefilter(timestart, timeend, addstarttime,addendtime, button.checked);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Function to add event listeners to the future time radio buttons.\r\n */\r\nfunction futuretimeaddEventListener() {\r\n    futureradiobuttons.forEach(function(button) {\r\n        button.addEventListener('change', function() {\r\n            // Disable the all_time button.\r\n            alltimebutton.forEach(function(alltimebutton) {\r\n                alltimebutton.checked = false;\r\n                alltimebutton.parentNode.classList.remove('active');\r\n            });\r\n\r\n            // Set the time span based on the radiobutton id.\r\n            timestart = currenttime;\r\n            timeend = currenttime + convertidtotime(button.id);\r\n\r\n            // Check if one past time button is checked. If yes, set the additional time span based on its id.\r\n            addstarttime = 0;\r\n            addendtime = 0;\r\n            pastradiobuttons.forEach(function(pastradiobutton) {\r\n                if (pastradiobutton.parentNode.classList.contains('active')) {\r\n                    addstarttime = currenttime - convertidtotime(pastradiobutton.id);\r\n                    addendtime = currenttime;\r\n                }\r\n            });\r\n\r\n            // Execute the filter function.\r\n            executefilter(timestart, timeend, addstarttime, addendtime, button.checked);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Function to add event listeners to the past time radio buttons.\r\n */\r\nfunction pasttimeaddEventListener() {\r\n    pastradiobuttons.forEach(function(button) {\r\n        button.addEventListener('change', function() {\r\n            // Disable the all_time button.\r\n            alltimebutton.forEach(function(alltimebutton) {\r\n                alltimebutton.checked = false;\r\n                alltimebutton.parentNode.classList.remove('active');\r\n            });\r\n\r\n            // Set the time span based on the radiobutton id.\r\n            timestart = currenttime - convertidtotime(button.id);\r\n            timeend = currenttime;\r\n\r\n            // Check if one future time button is checked. If yes, set the additional time span based on its id.\r\n            addstarttime = 0;\r\n            addendtime = 0;\r\n            futureradiobuttons.forEach(function(futureradiobutton) {\r\n                if (futureradiobutton.parentNode.classList.contains('active')) {\r\n                    addstarttime = currenttime;\r\n                    addendtime = currenttime + convertidtotime(futureradiobutton.id);\r\n                }\r\n            });\r\n\r\n            // Execute the filter function.\r\n            executefilter(timestart, timeend, addstarttime, addendtime, button.checked);\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Function to convert the radio button id to a useable time span.\r\n * @param {string} id  The id of the radio button\r\n * @returns {number}\r\n */\r\nfunction convertidtotime(id) {\r\n    switch(id) {\r\n        case \"ts_time_all\":\r\n            return 15778463;\r\n        case \"ts_time_next_twodays\":\r\n        case \"ts_time_last_twodays\":\r\n            return 172800;\r\n        case \"ts_time_next_fivedays\":\r\n        case \"ts_time_last_fivedays\":\r\n            return 432000;\r\n        case \"ts_time_next_week\":\r\n        case \"ts_time_last_week\":\r\n            return 604800;\r\n        case \"ts_time_next_month\":\r\n        case \"ts_time_last_month\":\r\n            return 2592000;\r\n    }\r\n}\r\n"],"names":["currenttime","Date","getTime","alltimebutton","forEach","button","addEventListener","timestart","convertidtotime","id","timeend","addstarttime","addendtime","futureradiobuttons","futureradiobutton","checked","parentNode","classList","remove","pastradiobuttons","pastradiobutton","executefilter","contains","document","querySelectorAll","starttime","endtime","buttonstate","letter","lettertime","querySelector","add"],"mappings":"sJA2CIA,aAAc,IAAIC,MAAOC,UAAY,IAyCrCC,cAAcC,SAAQ,SAASC,QAC3BA,OAAOC,iBAAiB,UAAU,WAE9BC,UAAYP,YAAcQ,gBAAgBH,OAAOI,IACjDC,QAAUV,YAAcQ,gBAAgBH,OAAOI,IAC/CE,aAAe,EACfC,WAAa,EAGbC,mBAAmBT,SAAQ,SAASU,mBAChCA,kBAAkBC,SAAU,EAC5BD,kBAAkBE,WAAWC,UAAUC,OAAO,aAElDC,iBAAiBf,SAAQ,SAASgB,iBAC9BA,gBAAgBL,SAAU,EAC1BK,gBAAgBJ,WAAWC,UAAUC,OAAO,aAKhDG,cAAcd,UAAWG,QAASC,aAAaC,WAAYP,OAAOU,eAS1EF,mBAAmBT,SAAQ,SAASC,QAChCA,OAAOC,iBAAiB,UAAU,WAE9BH,cAAcC,SAAQ,SAASD,eAC3BA,cAAcY,SAAU,EACxBZ,cAAca,WAAWC,UAAUC,OAAO,aAI9CX,UAAYP,YACZU,QAAUV,YAAcQ,gBAAgBH,OAAOI,IAG/CE,aAAe,EACfC,WAAa,EACbO,iBAAiBf,SAAQ,SAASgB,iBAC1BA,gBAAgBJ,WAAWC,UAAUK,SAAS,YAC9CX,aAAeX,YAAcQ,gBAAgBY,gBAAgBX,IAC7DG,WAAaZ,gBAKrBqB,cAAcd,UAAWG,QAASC,aAAcC,WAAYP,OAAOU,eAS3EI,iBAAiBf,SAAQ,SAASC,QAC9BA,OAAOC,iBAAiB,UAAU,WAE9BH,cAAcC,SAAQ,SAASD,eAC3BA,cAAcY,SAAU,EACxBZ,cAAca,WAAWC,UAAUC,OAAO,aAI9CX,UAAYP,YAAcQ,gBAAgBH,OAAOI,IACjDC,QAAUV,YAGVW,aAAe,EACfC,WAAa,EACbC,mBAAmBT,SAAQ,SAASU,mBAC5BA,kBAAkBE,WAAWC,UAAUK,SAAS,YAChDX,aAAeX,YACfY,WAAaZ,YAAcQ,gBAAgBM,kBAAkBL,QAKrEY,cAAcd,UAAWG,QAASC,aAAcC,WAAYP,OAAOU;;;;;;;;;;;MA7IzEZ,cAAgBoB,SAASC,iBAAiB,uBAC1CX,mBAAqBU,SAASC,iBAAiB,0BAC/CL,iBAAmBI,SAASC,iBAAiB,4BAG/CxB,YACAO,UACAG,QACAC,aACAC,oBAuBKS,cAAcI,UAAWC,QAASf,aAAcC,WAAYe,aAGjDJ,SAASC,iBAAiB,oEAGlCpB,SAAQ,SAASwB,YAGjBC,WAAaD,OAAOE,cAAc,0BAA0BrB,GAG3DkB,aAAgBE,YAAcJ,WAAaI,YAAcH,SACzDG,YAAclB,cAAgBkB,YAAcjB,WAC7CgB,OAAOX,UAAUc,IAAI,wBAErBH,OAAOX,UAAUC,OAAO,oCAuG3BV,gBAAgBC,WACdA,QACE,qBACM,aACN,2BACA,8BACM,WACN,4BACA,+BACM,UACN,wBACA,2BACM,WACN,yBACA,4BACM"}